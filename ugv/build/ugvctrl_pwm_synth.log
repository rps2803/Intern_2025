
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 12.2.0-14+deb12u1 -fPIC -Os)


-- Parsing `/home/rps/ugv/ugv_ctrl.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/rps/ugv/ugv_ctrl.v
Parsing Verilog input from `/home/rps/ugv/ugv_ctrl.v' to AST representation.
Generating RTLIL representation for module `\ugvctrl'.
Successfully finished Verilog frontend.

-- Running command `tcl /root/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   0 design levels: ugvctrl             
Automatically selected ugvctrl as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \ugvctrl

4.3.3. Analyzing design hierarchy..
Top module:  \ugvctrl
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$42 in module MULT.
Marked 2 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/home/rps/ugv/ugv_ctrl.v:47$3 in module ugvctrl.
Marked 1 switch rules as full_case in process $proc$/home/rps/ugv/ugv_ctrl.v:39$1 in module ugvctrl.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 5 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$25'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
Found async reset \QRT in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
Found async reset \rst in `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:39$1'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$42'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$25'.
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
     1/4: $1\duty_b2[7:0]
     2/4: $1\duty_b1[7:0]
     3/4: $1\duty_a2[7:0]
     4/4: $1\duty_a1[7:0]
Creating decoders for process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:39$1'.
     1/1: $0\pwm_counter[7:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ugvctrl.\duty_a1' from process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
No latch inferred for signal `\ugvctrl.\duty_a2' from process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
No latch inferred for signal `\ugvctrl.\duty_b1' from process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
No latch inferred for signal `\ugvctrl.\duty_b2' from process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$42'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$911' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\ugvctrl.\pwm_counter' using process `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:39$1'.
  created $adff cell `$procdff$912' with positive edge clock and positive level reset.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$42'.
Removing empty process `MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$42'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$25'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$24'.
Found and cleaned up 1 empty switch in `\ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
Removing empty process `ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:47$3'.
Removing empty process `ugvctrl.$proc$/home/rps/ugv/ugv_ctrl.v:39$1'.
Cleaned up 6 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
    New ctrl vector for $pmux cell $procmux$882: $auto$opt_reduce.cc:134:opt_mux$914
    New ctrl vector for $pmux cell $procmux$887: $auto$opt_reduce.cc:134:opt_mux$916
    New ctrl vector for $pmux cell $procmux$892: $auto$opt_reduce.cc:134:opt_mux$918
    New ctrl vector for $pmux cell $procmux$896: $auto$opt_reduce.cc:134:opt_mux$920
  Optimizing cells in module \ugvctrl.
Performed a total of 4 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.13. Executing CHECK pass (checking for obvious problems).
checking module ugvctrl..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ugvctrl.$add$/home/rps/ugv/ugv_ctrl.v:43$2 ($add).
Removed top 24 bits (of 32) from port Y of cell ugvctrl.$add$/home/rps/ugv/ugv_ctrl.v:43$2 ($add).
Removed top 1 bits (of 4) from port B of cell ugvctrl.$procmux$884_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ugvctrl.$procmux$888_CMP0 ($eq).

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ugvctrl:
  creating $macc model for $add$/home/rps/ugv/ugv_ctrl.v:43$2 ($add).
  creating $alu model for $macc $add$/home/rps/ugv/ugv_ctrl.v:43$2.
  creating $alu model for $lt$/home/rps/ugv/ugv_ctrl.v:89$4 ($lt): new $alu
  creating $alu model for $lt$/home/rps/ugv/ugv_ctrl.v:90$5 ($lt): new $alu
  creating $alu model for $lt$/home/rps/ugv/ugv_ctrl.v:91$6 ($lt): new $alu
  creating $alu model for $lt$/home/rps/ugv/ugv_ctrl.v:92$7 ($lt): new $alu
  creating $alu cell for $lt$/home/rps/ugv/ugv_ctrl.v:92$7: $auto$alumacc.cc:485:replace_alu$925
  creating $alu cell for $lt$/home/rps/ugv/ugv_ctrl.v:91$6: $auto$alumacc.cc:485:replace_alu$936
  creating $alu cell for $lt$/home/rps/ugv/ugv_ctrl.v:90$5: $auto$alumacc.cc:485:replace_alu$947
  creating $alu cell for $lt$/home/rps/ugv/ugv_ctrl.v:89$4: $auto$alumacc.cc:485:replace_alu$952
  creating $alu cell for $add$/home/rps/ugv/ugv_ctrl.v:43$2: $auto$alumacc.cc:485:replace_alu$957
  created 5 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$925
cell type $auto$alumacc.cc:485:replace_alu$936
cell type $auto$alumacc.cc:485:replace_alu$947
cell type $auto$alumacc.cc:485:replace_alu$952
cell type $auto$alumacc.cc:485:replace_alu$957
cell type $auto$alumacc.cc:67:get_gt$932
cell type $auto$alumacc.cc:67:get_gt$943
cell type $auto$alumacc.cc:68:get_gt$934
cell type $auto$alumacc.cc:68:get_gt$945
cell type $auto$alumacc.cc:75:get_eq$930
cell type $auto$alumacc.cc:75:get_eq$941
cell type $auto$alumacc.cc:89:get_cf$928
cell type $auto$alumacc.cc:89:get_cf$939
cell type $auto$alumacc.cc:89:get_cf$950
cell type $auto$alumacc.cc:89:get_cf$955
cell type $auto$opt_reduce.cc:128:opt_mux$913
cell type $auto$opt_reduce.cc:128:opt_mux$915
cell type $auto$opt_reduce.cc:128:opt_mux$917
cell type $auto$opt_reduce.cc:128:opt_mux$919
cell type $procdff$912
cell type $procmux$882
cell type $procmux$883_CMP0
cell type $procmux$884_CMP0
cell type $procmux$887
cell type $procmux$888_CMP0
cell type $procmux$889_CMP0
cell type $procmux$892
cell type $procmux$896

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
    Consolidated identical input bits for $mux cell $procmux$882:
      Old ports: A=8'00000000, B=8'11001000, Y=\duty_b2
      New ports: A=1'0, B=1'1, Y=\duty_b2 [3]
      New connections: { \duty_b2 [7:4] \duty_b2 [2:0] } = { \duty_b2 [3] \duty_b2 [3] 5'00000 }
    Consolidated identical input bits for $mux cell $procmux$887:
      Old ports: A=8'00000000, B=8'11001000, Y=\duty_b1
      New ports: A=1'0, B=1'1, Y=\duty_b1 [3]
      New connections: { \duty_b1 [7:4] \duty_b1 [2:0] } = { \duty_b1 [3] \duty_b1 [3] 5'00000 }
    Consolidated identical input bits for $mux cell $procmux$892:
      Old ports: A=8'00000000, B=8'11001000, Y=\duty_a2
      New ports: A=1'0, B=1'1, Y=\duty_a2 [3]
      New connections: { \duty_a2 [7:4] \duty_a2 [2:0] } = { \duty_a2 [3] \duty_a2 [3] 5'00000 }
    Consolidated identical input bits for $mux cell $procmux$896:
      Old ports: A=8'00000000, B=8'11001000, Y=\duty_a1
      New ports: A=1'0, B=1'1, Y=\duty_a1 [3]
      New connections: { \duty_a1 [7:4] \duty_a1 [2:0] } = { \duty_a1 [3] \duty_a1 [3] 5'00000 }
  Optimizing cells in module \ugvctrl.
Performed a total of 4 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.
<suppressed ~2 debug messages>

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 3 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.30.16. Rerunning OPT passes. (Maybe there is more to do..)

4.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.30.20. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.30.23. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
No more expansions possible.
<suppressed ~430 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.
<suppressed ~157 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
<suppressed ~141 debug messages>
Removed a total of 47 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 38 unused cells and 209 unused wires.
<suppressed ~39 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module ugvctrl..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module ugvctrl:

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
No more expansions possible.
<suppressed ~8 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ugvctrl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ugvctrl.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ugvctrl'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\ugvctrl' to `<abc-temp-dir>/input.blif'..
Extracted 120 gates and 132 wires to a netlist network with 12 inputs and 12 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       22
ABC RESULTS:        internal signals:      108
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       12
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 84 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
No more expansions possible.
<suppressed ~165 debug messages>
Removed 0 unused cells and 44 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 22 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 154 objects in module ugvctrl (12 iterations).
<suppressed ~42 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \ugvctrl

4.58.2. Analyzing design hierarchy..
Top module:  \ugvctrl
Removed 0 unused modules.

4.59. Printing statistics.

=== ugvctrl ===

   Number of wires:                 24
   Number of wire bits:             76
   Number of public wires:          24
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     LUT1                            1
     LUT2                            5
     LUT3                           15
     LUT4                            1
     dffc                            8

4.60. Executing CHECK pass (checking for obvious problems).
checking module ugvctrl..
found and reported 0 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on ugvctrl.clk[0].
Inserting ckpad on ugvctrl.clk[0].
Inserting $_BUF_ on ugvctrl.rst[0].
Inserting ckpad on ugvctrl.rst[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Marking already mapped port: ckpad.P[0].
Marking already mapped port: ugvctrl.rst[0].
Marking already mapped port: ugvctrl.clk[0].
Mapping port ugvctrl.a1_pwm using outpad.
Mapping port ugvctrl.a2_pwm using outpad.
Mapping port ugvctrl.b1_pwm using outpad.
Mapping port ugvctrl.b2_pwm using outpad.
Mapping port ugvctrl.fblr using inpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 1 unused cells and 45 unused wires.
<suppressed ~44 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module ugvctrl..
found and reported 0 problems.

5. Printing statistics.

=== ugvctrl ===

   Number of wires:                 46
   Number of wire bits:             46
   Number of public wires:          36
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     LUT1                            1
     LUT2                            5
     LUT3                           15
     LUT4                            1
     ckpad                           2
     dffc                            8
     inpad                           4
     outpad                          4

Loading PCF from '/home/rps/ugv/pygmy.pcf'...
Loading pinmap CSV from '/root/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  ckpad      | clk        |            |          |          | $auto$clkbufmap.cc:252:execute$1644
  ckpad      | rst        |            |          |          | $auto$clkbufmap.cc:252:execute$1649
  outpad     | a1_pwm     |            |          |          | $iopadmap$ugvctrl.a1_pwm
  outpad     | a2_pwm     |            |          |          | $iopadmap$ugvctrl.a2_pwm
  outpad     | b1_pwm     |            |          |          | $iopadmap$ugvctrl.b1_pwm
  outpad     | b2_pwm     |            |          |          | $iopadmap$ugvctrl.b2_pwm
  inpad      | fblr(0)    |            |          |          | $iopadmap$ugvctrl.fblr
  inpad      | fblr(1)    |            |          |          | $iopadmap$ugvctrl.fblr_1
  inpad      | fblr(2)    |            |          |          | $iopadmap$ugvctrl.fblr_2
  inpad      | fblr(3)    |            |          |          | $iopadmap$ugvctrl.fblr_3

6. Executing Verilog backend.
Dumping module `\ugvctrl'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod\ckpad\IO_PAD=0'\IO_LOC=0'\IO_TYPE=0' for cells of type ckpad.
Using template dffc for cells of type dffc.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$1afc89537ee5f3f94914f73379ca86af781a134c\LUT4 for cells of type LUT4.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod\inpad\IO_PAD=0'\IO_LOC=0'\IO_TYPE=0' for cells of type inpad.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template $paramod\outpad\IO_PAD=0'\IO_LOC=0'\IO_TYPE=0' for cells of type outpad.
No more expansions possible.
<suppressed ~228 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module ugvctrl.
<suppressed ~82 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ugvctrl..
Removed 0 unused cells and 56 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== ugvctrl ===

   Number of wires:                259
   Number of wire bits:            259
   Number of public wires:         251
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     BIDIR_CELL                      8
     CLOCK_CELL                      2
     C_FRAG                          1
     F_FRAG                          1
     GMUX_IP                         2
     Q_FRAG                          8
     T_FRAG                         20

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\ugvctrl'.

Warnings: 8 unique messages, 11 total
End of script. Logfile hash: fa672ef67d, CPU: user 2.16s system 0.25s, MEM: 237.28 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 12.2.0-14+deb12u1 -fPIC -Os)
Time spent: 65% 18x read_verilog (1 sec), 9% 27x opt_clean (0 sec), ...
